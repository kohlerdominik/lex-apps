apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "openvpn.fullname" . }}
  labels:
    app: {{ template "openvpn.name" . }}
    chart: {{ template "openvpn.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:

  setup-iptables.sh: |-
    #!/bin/bash

    # outgoing packages on tunnel 0 should be masqueraded because source is undefined
    iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE
    
    # port forwardings
    iptables -t nat -A PREROUTING -p tcp --dport 9901 -j DNAT --to-destination {{ .Values.forwarding.pf1.destination }}:{{ .Values.forwarding.pf1.port }}
    iptables -t nat -A PREROUTING -p udp --dport 9901 -j DNAT --to-destination {{ .Values.forwarding.pf1.destination }}:{{ .Values.forwarding.pf1.port }}
    iptables -t nat -A PREROUTING -p tcp --dport 9902 -j DNAT --to-destination {{ .Values.forwarding.pf2.destination }}:{{ .Values.forwarding.pf2.port }}
    iptables -t nat -A PREROUTING -p udp --dport 9902 -j DNAT --to-destination {{ .Values.forwarding.pf2.destination }}:{{ .Values.forwarding.pf2.port }}
    iptables -t nat -A PREROUTING -p tcp --dport 9903 -j DNAT --to-destination {{ .Values.forwarding.pf3.destination }}:{{ .Values.forwarding.pf3.port }}
    iptables -t nat -A PREROUTING -p udp --dport 9903 -j DNAT --to-destination {{ .Values.forwarding.pf3.destination }}:{{ .Values.forwarding.pf3.port }}
    iptables -t nat -A PREROUTING -p tcp --dport 9904 -j DNAT --to-destination {{ .Values.forwarding.pf4.destination }}:{{ .Values.forwarding.pf4.port }}
    iptables -t nat -A PREROUTING -p udp --dport 9904 -j DNAT --to-destination {{ .Values.forwarding.pf4.destination }}:{{ .Values.forwarding.pf4.port }}
    iptables -t nat -A PREROUTING -p tcp --dport 9905 -j DNAT --to-destination {{ .Values.forwarding.pf5.destination }}:{{ .Values.forwarding.pf5.port }}
    iptables -t nat -A PREROUTING -p udp --dport 9905 -j DNAT --to-destination {{ .Values.forwarding.pf5.destination }}:{{ .Values.forwarding.pf5.port }}
    iptables -t nat -A PREROUTING -p tcp --dport 9906 -j DNAT --to-destination {{ .Values.forwarding.pf6.destination }}:{{ .Values.forwarding.pf6.port }}
    iptables -t nat -A PREROUTING -p udp --dport 9906 -j DNAT --to-destination {{ .Values.forwarding.pf6.destination }}:{{ .Values.forwarding.pf6.port }}
    iptables -t nat -A PREROUTING -p tcp --dport 9907 -j DNAT --to-destination {{ .Values.forwarding.pf7.destination }}:{{ .Values.forwarding.pf7.port }}
    iptables -t nat -A PREROUTING -p udp --dport 9907 -j DNAT --to-destination {{ .Values.forwarding.pf7.destination }}:{{ .Values.forwarding.pf7.port }}
    iptables -t nat -A PREROUTING -p tcp --dport 9908 -j DNAT --to-destination {{ .Values.forwarding.pf8.destination }}:{{ .Values.forwarding.pf8.port }}
    iptables -t nat -A PREROUTING -p udp --dport 9908 -j DNAT --to-destination {{ .Values.forwarding.pf8.destination }}:{{ .Values.forwarding.pf8.port }}
    iptables -t nat -A PREROUTING -p tcp --dport 9909 -j DNAT --to-destination {{ .Values.forwarding.pf9.destination }}:{{ .Values.forwarding.pf9.port }}    
    iptables -t nat -A PREROUTING -p udp --dport 9909 -j DNAT --to-destination {{ .Values.forwarding.pf9.destination }}:{{ .Values.forwarding.pf9.port }}    

  setup-certs.sh: |-
    #!/bin/bash

    # set variables
    EASY_RSA_LOC="/etc/openvpn/certs"
    SERVER_CERT="${EASY_RSA_LOC}/pki/issued/server.crt"

    # create necessary certificates if no certificates exist
    if [ -e "$SERVER_CERT" ]
    then
      echo "found existing certs - reusing"
    else
      cp /etc/openvpn/setup/vars.default ${EASY_RSA_LOC}/vars
      cp -R /usr/share/easy-rsa/* $EASY_RSA_LOC
      cd $EASY_RSA_LOC
      ./easyrsa init-pki
      echo "ca\n" | ./easyrsa build-ca nopass
      ./easyrsa build-server-full server nopass
      echo "Starting gen-dh. This takes long time..."
      ./easyrsa gen-dh > /dev/null 2>&1
      openvpn --genkey --secret pki/ta.key
    fi


  newClientCert.sh: |-
      #!/bin/bash
      
      # set variables
      SERVICE_ID={{ .Values.general.service_id }}
      SERVER_ADDRESS={{ .Values.vpn.server_address }}
      SERVER_PORT={{  (add .Values.vpn.server_port 0)  }}
      CONNECTION_PROTOCOL={{  .Values.vpn.connection_protocol  }}
      EASY_RSA_LOC="/etc/openvpn/certs"

      # change to working directory
      cd $EASY_RSA_LOC

      # bild all cerificates
      ./easyrsa build-client-full ${SERVICE_ID} nopass
      
      # fill ovpn file
      cat >${EASY_RSA_LOC}/pki/${SERVICE_ID}.ovpn <<EOF
      # BEGIN OVPN CONFIG #
      # Client Config
      client
      dev tun
      cipher AES-256-CBC
      comp-lzo
      key-direction 1

      # Private Client Key
      <key>
      `cat ${EASY_RSA_LOC}/pki/private/${SERVICE_ID}.key`
      </key>

      # Public Client Cert
      <cert>
      `cat ${EASY_RSA_LOC}/pki/issued/${SERVICE_ID}.crt`
      </cert>

      # CA Cert
      <ca>
      `cat ${EASY_RSA_LOC}/pki/ca.crt`
      </ca>

      # DH Key
      <dh>
      `cat ${EASY_RSA_LOC}/pki/dh.pem`
      </dh>

      # TLS Auth Key
      <tls-auth>
      `cat ${EASY_RSA_LOC}/pki/ta.key`
      </tls-auth>

      # Server Connection Config
      <connection>
      remote ${SERVER_ADDRESS} ${SERVER_PORT} ${CONNECTION_PROTOCOL}
      </connection>
      # END OVPN CONFIG #
      EOF

      # echo ovpn file
      #echo "--------------------"
      #echo "Generated ovpn-file:"
      #echo ""
      #cat pki/${SERVICE_ID}.ovpn


  configure.sh: |-
      #!/bin/sh

      # set variables
      SERVICE_ID={{ .Values.general.service_id }}
      SERVER_ADDRESS={{ .Values.vpn.server_address }}
      SERVER_PORT={{  (add .Values.vpn.sever_port 0)  }}
      CONNECTION_PROTOCOL={{  .Values.vpn.connection_protocol  }}
      EASY_RSA_LOC="/etc/openvpn/certs"

      # allow ip_forwarding (try to move to deployment capabilities with kubernetes 1.11)
      echo 1 > /proc/sys/net/ipv4/ip_forward

      # apply iptables
      /etc/openvpn/setup/setup-iptables.sh
      
      # create general certificates
      /etc/openvpn/setup/setup-certs.sh

      # create client certificate
      /etc/openvpn/setup/newClientCert.sh

      mkdir -p /dev/net
      if [ ! -c /dev/net/tun ]; then
          mknod /dev/net/tun c 10 200
      fi

      cp -f /etc/openvpn/setup/openvpn.conf /etc/openvpn/
      mkdir -p /etc/openvpn/ccd/
      cp -f /etc/openvpn/setup/client-ccd.conf /etc/openvpn/ccd/${SERVICE_ID}

      openvpn --config /etc/openvpn/openvpn.conf


  vars.default: |-
      # easy-rsa parameter settings

      # NOTE: If you installed from an RPM,
      # don't edit this file in place in
      # /usr/share/openvpn/easy-rsa --
      # instead, you should copy the whole
      # easy-rsa directory to another location
      # (such as /etc/openvpn) so that your
      # edits will not be wiped out by a future
      # OpenVPN package upgrade.

      # This variable should point to
      # the top level of the easy-rsa
      # tree.
      export EASY_RSA="`pwd`"

      #
      # This variable should point to
      # the requested executables
      #
      export OPENSSL="openssl"
      export PKCS11TOOL="pkcs11-tool"
      export GREP="grep"


      # This variable should point to
      # the openssl.cnf file included
      # with easy-rsa.
      export KEY_CONFIG=$EASY_RSA/openssl-1.0.0.cnf

      # Edit this variable to point to
      # your soon-to-be-created key
      # directory.
      #
      # WARNING: clean-all will do
      # a rm -rf on this directory
      # so make sure you define
      # it correctly!
      export KEY_DIR="$EASY_RSA/keys"

      # Issue rm -rf warning
      echo NOTE: If you run ./clean-all, I will be doing a rm -rf on $KEY_DIR

      # PKCS11 fixes
      export PKCS11_MODULE_PATH="dummy"
      export PKCS11_PIN="dummy"

      # Increase this to 2048 if you
      # are paranoid.  This will slow
      # down TLS negotiation performance
      # as well as the one-time DH parms
      # generation process.
      export KEY_SIZE=2048

      # In how many days should the root CA key expire?
      export CA_EXPIRE=3650

      # In how many days should certificates expire?
      export KEY_EXPIRE=3650

      # These are the default values for fields
      # which will be placed in the certificate.
      # Don't leave any of these fields blank.
      export KEY_COUNTRY="CH"
      export KEY_PROVINCE="OW"
      export KEY_CITY="Sarnen"
      export KEY_ORG="Lextira"
      export KEY_EMAIL="itadmin@lexlink.ch"
      export KEY_OU="Lexlink"

      # X509 Subject Field
      export KEY_NAME="Lexlink"

      # PKCS11 Smart Card
      # export PKCS11_MODULE_PATH="/usr/lib/changeme.so"
      # export PKCS11_PIN=1234

      # If you'd like to sign all keys with the same Common Name, uncomment the KEY_CN export below
      # You will also need to make sure your OpenVPN server config has the duplicate-cn option set
      # export KEY_CN="CommonName"


  openvpn.conf: |-

      topology subnet
      push "topology subnet"

      mode server
      tls-server
      {{ if (eq "udp" .Values.vpn.connection_protocol) }}
      proto udp
      {{ else }}
      proto tcp-server
      {{ end }}
      port  {{ .Values.service.internalPort }}
      dev tun
      status /tmp/openvpn-status.log

      cipher AES-256-CBC
      tls-cipher DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-CAMELLIA256-SHA:DHE-RSA-AES256-SHA:DHE-RSA-CAMELLIA128-SHA:DHE-RSA-AES128-SHA:CAMELLIA256-SHA:AES256-SHA:CAMELLIA128-SHA:AES128-SHA

      key /etc/openvpn/certs/pki/private/server.key
      ca /etc/openvpn/certs/pki/ca.crt
      cert /etc/openvpn/certs/pki/issued/server.crt
      dh /etc/openvpn/certs/pki/dh.pem
      tls-auth /etc/openvpn/certs/pki/ta.key 0

      client-config-dir /etc/openvpn/ccd

      key-direction 0
      keepalive 10 60
      persist-key
      persist-tun

      ifconfig {{ .Values.vpn.tunnel_server_ip }} {{  .Values.vpn.tunnel_mask  }}
      ifconfig-pool {{ .Values.vpn.tunnel_pool_start }} {{ .Values.vpn.tunnel_pool_end }} {{  .Values.vpn.tunnel_mask  }}
      
      route 10.168.168.168 255.255.255.255 {{  .Values.vpn.tunnel_client_ip  }}
      route 192.168.168.168 255.255.255.255 {{  .Values.vpn.tunnel_client_ip  }}
      route {{  .Values.client.network_ip  }} {{  .Values.client.network_mask  }} {{  .Values.vpn.tunnel_client_ip  }}
      push "route-gateway {{ .Values.vpn.tunnel_server_ip }}"
      push "route 10.168.168.168 255.255.255.255"
      push "route 192.168.168.168 255.255.255.255"
      push "route {{  .Values.client.network_ip  }} {{  .Values.client.network_mask  }}"

      user nobody
      group nogroup

      verb 3


  client-ccd.conf: |-
    push "keepalive 10 120"
    ifconfig-push {{  .Values.vpn.tunnel_client_ip  }} {{  .Values.vpn.tunnel_mask  }}
    iroute 10.168.168.168 255.255.255.255
    iroute 192.168.168.168 255.255.255.255
    iroute {{  .Values.client.network_ip  }} {{  .Values.client.network_mask  }}