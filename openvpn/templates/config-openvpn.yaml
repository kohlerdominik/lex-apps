apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "openvpn.fullname" . }}
  labels:
    app: {{ template "openvpn.name" . }}
    chart: {{ template "openvpn.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:

  setup-iptables.sh: |-
    #!/bin/bash

    #iptables -t nat -A PREROUTING -p all --dport 9901 -j DNAT --to-destination {{ .Values.forwarding.pf1.destination }}:{{ .Values.forwarding.pf1.port }}
    #iptables -t nat -A PREROUTING -p all --dport 9902 -j DNAT --to-destination {{ .Values.forwarding.pf2.destination }}:{{ .Values.forwarding.pf2.port }}
    #iptables -t nat -A PREROUTING -p all --dport 9903 -j DNAT --to-destination {{ .Values.forwarding.pf3.destination }}:{{ .Values.forwarding.pf3.port }}


  setup-certs.sh: |-
    #!/bin/bash

    # set variables
    EASY_RSA_LOC="/etc/openvpn/certs"
    SERVER_CERT="${EASY_RSA_LOC}/pki/issued/server.crt"

    # create necessary certificates if no certificates exist
    if [ -e "$SERVER_CERT" ]
    then
      echo "found existing certs - reusing"
    else
      cp -R /usr/share/easy-rsa/* $EASY_RSA_LOC
      cd $EASY_RSA_LOC
      ./easyrsa init-pki
      echo "ca\n" | ./easyrsa build-ca nopass
      ./easyrsa build-server-full server nopass
      ./easyrsa gen-dh
      openvpn --genkey --secret pki/ta.key
    fi


  newClientCert.sh: |-
      #!/bin/bash
      
      # set variables
      SERVICE_ID={{ .Values.general.service_id }}
      SERVER_ADDRESS={{ .Values.vpn.server_address }}
      SERVER_PORT={{  (add .Values.vpn.server_port 0)  }}
      CONNECTION_PROTOCOL={{  .Values.vpn.connection_protocol  }}
      EASY_RSA_LOC="/etc/openvpn/certs"

      # change to working directory
      cd $EASY_RSA_LOC

      # bild all cerificates
      ./easyrsa build-client-full ${SERVICE_ID} nopass
      
      # fill ovpn file
      cat >${EASY_RSA_LOC}/pki/${SERVICE_ID}.ovpn <<EOF
      client
      dev tun
      cipher AES-256-CBC
      key-direction 1
      <key>
      `cat ${EASY_RSA_LOC}/pki/private/${SERVICE_ID}.key`
      </key>
      <cert>
      `cat ${EASY_RSA_LOC}/pki/issued/${SERVICE_ID}.crt`
      </cert>
      <ca>
      `cat ${EASY_RSA_LOC}/pki/ca.crt`
      </ca>
      <dh>
      `cat ${EASY_RSA_LOC}/pki/dh.pem`
      </dh>
      <tls-auth>
      `cat ${EASY_RSA_LOC}/pki/ta.key`
      </tls-auth>
      <connection>
      remote ${SERVER_ADDRESS} ${SERVER_PORT} ${CONNECTION_PROTOCOL}
      </connection>
      EOF

      # echo ovpn file
      #echo "--------------------"
      #echo "Generated ovpn-file:"
      #echo ""
      #cat pki/${SERVICE_ID}.ovpn


  configure.sh: |-
      #!/bin/sh

      # set variables
      SERVICE_ID={{ .Values.general.service_id }}
      SERVER_ADDRESS={{ .Values.vpn.server_address }}
      SERVER_PORT={{  (add .Values.vpn.sever_port 0)  }}
      CONNECTION_PROTOCOL={{  .Values.vpn.connection_protocol  }}
      EASY_RSA_LOC="/etc/openvpn/certs"

      # allow ip_forwarding (try to move to deployment capabilities with kubernetes 1.11)
      echo 1 > /proc/sys/net/ipv4/ip_forward

      # apply iptables
      /etc/openvpn/setup/setup-iptables.sh
      
      # create general certificates
      /etc/openvpn/setup/setup-certs.sh

      # create client certificate
      /etc/openvpn/setup/newClientCert.sh

      mkdir -p /dev/net
      if [ ! -c /dev/net/tun ]; then
          mknod /dev/net/tun c 10 200
      fi

      cp -f /etc/openvpn/setup/openvpn.conf /etc/openvpn/
      mkdir -p /etc/openvpn/ccd/
      cp -f /etc/openvpn/setup/client-ccd.conf /etc/openvpn/ccd/${SERVICE_ID}

      openvpn --config /etc/openvpn/openvpn.conf


  openvpn.conf: |-
      topology subnet

      server {{ .Values.vpn.tunnel_network }} {{ .Values.vpn.tunnel_mask }}

      proto {{ .Values.vpn.connection_protocol }}
      port  {{ .Values.service.internalPort }}
      dev tun
      status /tmp/openvpn-status.log

      cipher AES-256-CBC

      key /etc/openvpn/certs/pki/private/server.key
      ca /etc/openvpn/certs/pki/ca.crt
      cert /etc/openvpn/certs/pki/issued/server.crt
      dh /etc/openvpn/certs/pki/dh.pem
      tls-auth /etc/openvpn/certs/pki/ta.key

      client-config-dir /etc/openvpn/ccd

      key-direction 0
      keepalive 10 60
      persist-key
      persist-tun

      ifconfig {{  .Values.vpn.tunnel_server_ip  }} {{  .Values.vpn.tunnel_mask  }}
      route {{  .Values.client.network_ip  }} {{  .Values.client.network_mask  }} {{  .Values.vpn.tunnel_client_ip  }}

      user nobody
      group nogroup

      verb 3


  client-ccd.conf: |-
    ifconfig-push {{  .Values.vpn.tunnel_client_ip  }} {{  .Values.vpn.tunnel_mask  }}
    push "route 10.0.0.0 255.0.0.0 {{  .Values.vpn.tunnel_server_ip  }}"
    iroute {{  .Values.client.network_ip  }} {{  .Values.client.network_mask  }}
